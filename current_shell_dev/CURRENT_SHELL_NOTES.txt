#SYNOPSIS:
OKAY, SO I WAS JUST TRYING TO RIGHT A VERY BASIC SCRIPT AND PLAY AROUND AND PRACTICE SOME UBER-1337 BASHZ SKILLZ.

NOW, THIS IS A PURE COPY OF THE PROOF I HAVE OF A POSSIBLE BUG/VULNERABILITY-POSSIBILITY, AS I HAVE YET TO BEEN ABLE TO REPRODUCE IT AFTER TESTING...
(I THINK THE 'EXEC' COMMAND HAD SOMETHING TO DO WITH THIS THAT HAS GONE LOST IN MY NOTES TBH...)

WHAT I BELIEVE IS HAPPENING HERE IS A 'HIDDEN', ADDITIONAL STRING WITHIN A SINGLE VARIABLE THAT GOES UNNOTICED BY STDOUT AND EVEN VERBOSE BASH...

WITH THAT SAID, I BELIEVE -IF THIS IS ABLE TO GET REPRODUCED APPROPRIATELY AGAIN - THAT ONE COULD USE THIS ESSENTIALLY AS A PAYLOAD FOR
EITHER POSSIBLE REMOTE CODE INJECTION / POSSIBLY BUFFER OVERFLOWS (DUE TO BYTES NOT MATCHING INODES, ETC...).

AGAIN, I AM CLEARLY NO EXPERT IN THE MATTER AT HAND SPECIFICALLY, SO I'D LOVE TO HEAR SOME INSIGHT/INPUT/QUESTIONS/COMMENTS ABOUT THIS SCENARIO.

THIS IS VERY WORDY AND I HAVEN'T PROVIDED THE BEST DESCRIPTIONS BUT I HOPE YA'LL CAN UNDERSTAND WHAT'S HAPPENING HERE (AND FILL ME IN AS WELL!).

ENJOY!



#BELOW IS A COPY OF THE ORIGINAL SCRIPT FOR REFERENCE:


```
#!/bin/bash

#Prints the shell executable (ex - /bin/bash, /usr/bin/bash, etc.)
echo "The current shell is located at:"
echo $SHELL
echo ""

#Prints the Current PID of the Script being executed (this script, "CURRENT_SHELL.sh"
echo "The Current PID of this script being executed is "$$""
echo ""

#The below prints general/additional shell information in relation to its Shell, PID, TTY, & UPTIME.
echo "Current Shell PID, TTY, UPTIME(since) & SHELL"
bash -c ps -p "$$" > /tmp/dollaz.tmp && cat /tmp/dollaz.tmp | grep -v ps | head -2
```


###NOTES FROM HISTORY TO TRY AND REPRODUCE (ALSO, REMEMBER THAT AN 'EXEC' COMMAND WAS ALSO USED SOMEHOW, SOMEWHERE...)
patrick@patrick-HP:~$ history |grep -i dollaz
 1089  cat /tmp/2dollaz.tmp
 1090  cat /tmp/2dollaz.tmp | tail -2
 1091  cat /tmp/2dollaz.tmp | tail -1
 1094  RESULT1=`bash -c ps -p "$$" > /tmp/dollaz.tmp && cat /tmp/dollaz.tmp | grep -v ps | head -2
 1095  tail -1 /tmp/2dollaz.tmp
 1139  bash -c ps -p "$$" > /tmp/dollaz.tmp && cat /tmp/dollaz.tmp | grep -v ps | head -2 && rm -f /tmp/dollaz.tmp
 1140  bash -c ps -p "$$" > /tmp/dollaz.tmp && cat /tmp/dollaz.tmp | grep -v ps | head -2 && rm -f /tmp/dollaz.tmp | awk '{ print $NF }'
 1141  bash -c ps -p "$$" > /tmp/dollaz.tmp && cat /tmp/dollaz.tmp | grep -v ps | head -2 && rm -f /tmp/dollaz.tmp | awk 'NF{ print $NF }'
 1142  bash -c ps -p "$$" > /tmp/dollaz.tmp && cat /tmp/dollaz.tmp | grep -v ps | head -2 && rm -f /tmp/dollaz.tmp awk 'NF{ print $NF }'
 1144  RESULT1=`bash -c ps -p "$$" > /tmp/dollaz.tmp && cat /tmp/dollaz.tmp | grep -v ps | head -2 && rm -f /tmp/dollaz.tmp`
 1152  RESULT1=`bash -c ps -p "$$" > /tmp/dollaz.tmp && cat /tmp/dollaz.tmp | grep -v ps | head -2 && rm -f /tmp/dollaz.tmp`
 1153  echo "$RESULT1" > /tmp/modollaz.tmp | tail -2 && rm -f /tmp/modollaz.tmp
 1154  RESULT1=`bash -c ps -p "$$" > /tmp/dollaz.tmp && cat /tmp/dollaz.tmp | grep -v ps | head -2
 1155  RESULT1=`bash -c ps -p "$$" > /tmp/dollaz.tmp && cat /tmp/dollaz.tmp | grep -v ps | head -2`
 1157  RESULT1=`bash -c ps -p "$$" > /tmp/dollaz.tmp && cat /tmp/dollaz.tmp | grep -v ps | head -2 && rm -f /tmp/dollaz.tmp`
 1951  bash -c ps -p "$$" > /tmp/dollaz.tmp && cat /tmp/dollaz.tmp | grep -v ps | head -2
 2000  history |grep -i dollaz





#BELOW ARE THE RESULTS OF THE "CURRENT_SHELL.sh" SCRIPT

#I WROTE THIS FOR FUN, HOWEVER STUMBLED UPON A STRANGE PHENOMENA IN WHICH IS BEYOND MY CURRENT SCOPE OF REASONING AT THE MOMENT... I WANNA SAY UNTIL VALIDATED BY SOME GURU...



#HOWEVER, TO ME, THIS MAKES NO SENSE DUE TO THE FOLLOWING:

1) THE COMMAND TO RETRIEVE THE $PID OF THE CURRENT RUNNING SHELL DOESN'T SEEM POSSIBLE AT ALL DUE TO THE FACT THAT THE "$$" VARIABLE IS SET AS THE $PID OF THE CURRENTLY RUNNING SCRIPT.
MEANING, THE $PID VIA THE $$ ENVIRONMENT VARIABLE SHOULD ONLY RETURN THE $PID OF THE CURRENTLY RUNNING SCRIPT (CURRENT_SHELL.sh).

2) YES, THE BASH/TERMINAL SESSION IS THE CURRENT RUNNING SHELL VIA USER 'patrick' IN THIS CASE AND THE PIDS ARE:
TERMINAL 1 PID & PTS: 106899,pts/8. #USED FOR SCRIPT EXECUTION
TERMINAL 2 PID & PTS: 111501,pts/7. #USED FOR TAILING TEMP FILE CHANGES GENERATED BY SCRIPT TO HOPEFULLY DETECT 'MISSING/HIDDEN' STDOUT DATA...

3) THE OBSERVATIONS ARE BASED UPON THE FOLLOWING:
	a) RUNNING THE SCRIPT NORMALLY VIA pts/8 AND RETURNING RESULTS
	b) RUNNING THE SCRIPT VIA BASH'S VERBOSE OUTPUT MODE (USED TO SHOW WHAT IS BEING EXECUTED AS WELL AS TRANSLATION OF VARIABLES DURING THE SCRIPT'S EXECUTION).
		I. VERBOSE BASH EXECUTION OF THE SCRIPT ALSO ENDED UP TRANSLATING AND PRINTING THE PID VARIABLE OF THE SHELL SCRIPT RUNNING CURRENTLY, HOWEVER NOT THE PID OF THE TTY/PTS/TERMINAL SHELL OF USER 'patrick'.
		   THIS IS NORMAL BEHAVIOR, HOWEVER, IT BECOMES AN ODDITY WHEN THE OUTPUT OF THE FINAL COMMAND INTO THE TEMP FILE CONTAINS TWO DIFFERENT SETS OF VARIABLES AND DATA ON A SUPPOSED SINGLE VARIABLE...
		II. THE ">" COMMAND IS THE 'OUTPUT' COMMAND AND CAN BE USED TO REDIRECT THE RESULTS OF A COMMAND THAT WOULD HAVE NORMALLY BEEN SENT TO STDOUT (THE RESULTS OF THE COMMAND) TO A FILE.  IN ADDITION TO THAT, 	THE ">" (OUTPUT) COMMAND COMPELTELY OVERWRITES THE FILE THAT IT'S BEING WRITTEN TO, REPLACED WITH THE DATA REDIRECTED FROM STDOUT.
		III. THIS ALL MEANS THAT, ACCORDING TO MY KNOWLEDGE, THAT NONE OF THAT IS POSSIBLE.  THERE IS ALSO ONE MORE REASON WHY THIS IS NOT POSSIBLE.
	c) THE FINAL OUTPUT OF THE /tmp/dollaz.tmp FILE BEING THE WAY IT IS MAKES NO SENSE ALSO - EVEN IF THE PID OF THE CURRENT USER'S TTY/PTS/SHELL/TERMINAL IS FOUND (IN THE FORM OF AN ENVIRONMENT VARIABLE, "$$"), THEN IT WOULD/SHOULD, THEORETICALLY, THEN OVERWRITE THE PREVIOUS CONTENTS ANYWAY - MEANING THAT THE FILE WOULD LOOK LIKE THIS (BROKEN DOWN):

```
	#bash -c ps -p "$$" > /tmp/dollaz.tmp && cat /tmp/dollaz.tmp | grep -v ps | head -2
	THE ABOVE COMMAND WOULD/SHOULD PRODUCE THE FOLLOWING TO /tmp/dollaz.tmp:

	    PID TTY          TIME CMD
	  27264 pts/2    00:00:00 bash

```


```
	#WHAT WOULD HAPPEN IF $PID OF 'pts/8' of user 'patrick' OVERWRITES THE FILE AFTER THE ORIGINAL WRITE:
	PID TTY          TIME CMD
	106899 pts/8    00:00:00 bash



	#BEST CASE SCENARIO (WITH BOTH VARIABLES)
	PID TTY          TIME CMD
	106899 pts/8    00:00:00 bash
	PID TTY          TIME CMD
 	111608 pts/8    00:00:00 CURRENT_SHELL.s
```

patrick@patrick-HP:~$ ./CURRENT_SHELL.sh
The current shell is located at:
/bin/bash

The Current PID of this script being executed is 111608

Current Shell PID, TTY, UPTIME(since) & SHELL
    PID TTY          TIME CMD
 106899 pts/8    00:00:00 bash
 111608 pts/8    00:00:00 CURRENT_SHELL.s

patrick@patrick-HP:~$ echo $$
106899

patrick@patrick-HP:~$ vim CURRENT_SHELL.sh

patrick@patrick-HP:~$ /bin/bash -xe ./CURRENT_SHELL.sh
+ echo 'The current shell is located at:'
The current shell is located at:
+ echo /bin/bash
/bin/bash
+ echo ''

+ echo 'The Current PID of this script being executed is 111702'
The Current PID of this script being executed is 111702
+ echo ''

+ echo 'Current Shell PID, TTY, UPTIME(since) & SHELL'
Current Shell PID, TTY, UPTIME(since) & SHELL
+ bash -c ps -p 111702
+ cat /tmp/dollaz.tmp
+ grep -v ps
    PID TTY          TIME CMD
 106899 pts/8    00:00:00 bash
 111702 pts/8    00:00:00 bash
patrick@patrick-HP:~$ echo $$
106899


#THE ABOVE PROVES THAT, FOR SOME REASON, STDOUT DOES NOT PRINT THE PID OF THE SHELL SESSION FROM THE TTY/PTS OF THE CURRENT USER WHILE RUNNING THIS SCRIPT, EVEN IN A QUASI-VERBOSE-MODE USING '/bin/bash -xe'.
#HOWEVER, THE TMP FILE THAT IS A RESULT OF THE 'bash -c (IN WHICH, 'bash -c': IS DEFINED AS: "-c option whose standard input and  error  are  both  connected  to  terminals") COMMAND...'
#THE WHOLE COMMAND: 'bash -c ps -p $$ && cat bash -c ps -p "$$" > /tmp/dollaz.tmp && cat /tmp/dollaz.tmp | grep -v ps | head -2 USES STDOUT TO OUTPUT THE RESULTS OF THE COMMAND TO THE FILE "dollaz.tmp" AND IS #COMPLETELY OVERWRITTEN EACH TIME THE COMMAND IS EXECUTED, CLEARING THE PREVIOUS FILE.  THAT FILE IS THEN ACCESSED USING CAT AND PRINTED TO STDOUT AND PARSED APPROPRIATELY TO PRINT A FINAL, CLEAN OUTPUT FOR THE #USER'S TERMINAL SCREEN.'





patrick@patrick-HP:~$ tail -f /tmp/dollaz.tmp
    PID TTY          TIME CMD
 111501 pts/7    00:00:00 bash
 111986 pts/7    00:00:00 CURRENT_SHELL.s
 111987 pts/7    00:00:00 ps
tail: /tmp/dollaz.tmp: file truncated
    PID TTY          TIME CMD
 111501 pts/7    00:00:00 bash
 112006 pts/7    00:00:00 bash
 112007 pts/7    00:00:00 ps
^C
patrick@patrick-HP:~$ cat /tmp/dollaz.tmp
    PID TTY          TIME CMD
 111501 pts/7    00:00:00 bash
 112006 pts/7    00:00:00 bash
 112007 pts/7    00:00:00 ps
patrick@patrick-HP:~$ echo $$
106899



CONCLUSION:  I AM NOW ACTUALLY HAVING DIFFICULTIES REPRODUCING THIS MYSTERIOUS PHENOMENA, HOWEVER, MAYBE SOMEONE ELSE CAN FIGURE IT OUT...
EITHER WAY, IF THIS ACTUALLY OCCURED AS ASSUMED - HAVING A HIDDEN STRING WITHIN A SINGLE VARIABLE NOT SEEN BY STDOUT OR VERBOSE BASH SHELL - THEN, THIS IS A POSSIBLE SECURITY VULNERABILITY AT HAND...
